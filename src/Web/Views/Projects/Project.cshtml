@using Jineo.ViewModels
@model ProjectPageViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
  <div class="container-flex">
      
    
    <div class="container-40">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Project Info</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Profile</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Contact</a>
            </li>
          </ul>
          <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                @Html.Partial("_ProjectInfoPartial", new PartialModel() { Id = @Model.Project.Id })
            </div>
            <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                @Html.Partial("_UsersListPartial", new PartialModel() { Id = @Model.Project.Id, ReadOnly = false })
            </div>
            <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                @Html.Partial("_IssuesPartial", new PartialModel() { Id = -1, ReadOnly = false })
            </div>
          </div>    
    </div>
      <div class="card-shadow container-60">
        <div class="card-header card-header-city">
            Info
        </div>
      <div class="card-body">
            @Html.Partial("_BlueprintPartial", new PartialModel() { Id = -1 })
      </div>  
    </div>

  </div>


  <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div id="modal" class="modal-body">
          <label for="">Name of sensor:</label>
          <input id='sensorname' class="form-control" type="">
          <label for="">Lower value:</label>
          <input required id='lowervalue' class="form-control" onchange="setmin()" type="number">
          <label for="">Upper value:</label>
          <input required id='uppervalue' class="form-control" type="number" min="0">
          <label for="">Product</label>
          <select id="productId" id="">
            @foreach(var p in Model.Products)
            {
              <option value="@p.Id">
                @p.Name
              </option>
            }
          </select>
        </div>
        <script>
          function setmin()
          {
            var min = document.getElementById('lowervalue').value
            document.getElementById('uppervalue').setAttribute('min', min)
          }
        </script>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button onclick="addSensor()" type="submit" class="btn btn-primary" data-dismiss="modal">Save changes</button>
        </div>
      </div>
    </div>
  </div>
</body>

<script>
  var content 
  function addSensor() {
    var name = document.getElementById('sensorname').value
    var upperValue = document.getElementById('uppervalue').value
    var lowerValue = document.getElementById('lowervalue').value
    var productId = document.getElementById('productId').value
    $.ajax(
    {
    type: 'POST',
    data: {
      projectId: '@Model.Project.Id',
      name: name,
      x: sensorsX,
      y: sensorsY,
      upperValue: upperValue,
      lowerValue: lowerValue,
      productId: productId
    },
    url: '/addsensor',
    success: function (response) {
      init()
    }
    }
    )
  }
    window.onload = function() {

        loadProjectInfo('@Model.Project.Id')
        getUsersList('@Model.Project.Id')
        loadIssues('@Model.Project.Id')
        $.ajax(
        {
        type: 'GET',
        data: {
            id: '@Model.Project.Id'
        },
        url: '/getproject',
        success: function (response) {
            if(response.project.json == null){
                content = generateBuilding(5,5,100,50)
                var str = JSON.stringify(content)
                $.ajax(
                {
                type: 'POST',
                data: {
                    json: str,
                    id: '@Model.Project.Id'
                },
                url: '/writeproject',
                success: function (response) {
                    content = JSON.parse(response.json)
                    init()
                }
                }
                )
            }
            else
            {
                content = JSON.parse(response.project.json)
                //alert(response.project.json)
                init() 
            }
        }
        }
        )
        var sensors = [];
        
    }

    function init()
    {
      $.ajax(
        {
        type: 'GET',
        data: {
            projectId: '@Model.Project.Id'
        },
        url: '/getsensors',
        success: function (response) {
          sensors = response.sensors;
          initBlueprint(content.building, sensors)
        }
      }
      )
    }
    
</script>
</html>